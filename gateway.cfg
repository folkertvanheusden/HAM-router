general = {
	logfile = "gateway.log";

	local-latitude = 123.0;
	local-longitude = 123.0;

	# this is to set how often a message may be repeated(!) in an interval
	# this is the global setting. it is optional.
	repetition-rate-limiting = {
		max-per-interval  = 1;
		interval-duration = 5;
		max-n-elements    = 1000;  # number of unique messages to remember
	}
}

snmp = {
# optional
	port = 161;
}

filters = ({
		name = "valid-nl-callsign";

# if a rule(-set) matches, then the message is NOT processed
		definition = {
			# all, none, one
			how-to-compare = "one";

			rules = (
				  {
# currently known field-names:
# from / to: callsigns
# protocol : AX.25 / APRS-OE
# latitude / longitude: as floats (NOT nmea)
# content  : payload
					field-name = "from";  # match on callsign
					value-type = "string";  # match on text
					value-data = "^P[A-I].*";  # must begin with "PD"
					how-to-compare = "regex";  # 'value-data' is in this case a regular expression

					not = false;  # do not negate result

					ignore-if-field-is-missing = true;  # e.g. when not AX.25 / APRS
					ignore-data-type-mismatch = true;  # if not a string, then maybe different (unexpected) protocol
					ignore-action-not-applicable-to-data-type = true;
				  }
				);
		}
	})

tranceivers = (
	{
		type = "kiss";
# id is used for mappings
		id = "ax0";

		# this is to set how often a message may be repeated(!) in an interval
		repetition-rate-limiting = {
			max-per-interval  = 1;
			interval-duration = 60;
			max-n-elements    = 1000;
		}

		callsign = "PD9FVH";
	},

	{
		type = "lora-sx1278";

		id = "lora-sx1278";

		repetition-rate-limiting = {
			max-per-interval  = 3;
			interval-duration = 60;
			max-n-elements    = 1000;
		}

		dio0-pin = 17;
		reset-pin = 27;
	},

	{
		type = "aprs-si";

		id = "aprs-si";

		repetition-rate-limiting = {
			max-per-interval  = 10;
			interval-duration = 60;
			max-n-elements    = 1000;
		}

		aprs-user = "PD9FVH";
		aprs-pass = "19624";

		local-callsign = "PD9FVH-L";
	},

	{
		type = "beacon";

		id = "beacon-ax25";

		text = "Hello, world!";
		interval = 30;

		mode = "ax25";

		source-callsign = "PD9FVH";
	},

	{
		type = "beacon";

		id = "beacon-aprs";

		text = "Hello, world!";
		interval = 600;

		mode = "aprs";

		source-callsign = "PD9FVH";
	},

	{
		id = "axudp-tunnels";

		type = "axudp";

		repetition-rate-limiting = {
			max-per-interval  = 5;
			interval-duration = 60;
			max-n-elements    = 1000;
		}

		listen-port = 10093;

		destinations = "10.208.30.222:10093 192.168.64.200:10093 172.29.0.107:10093";

		# send to other destinations for this tunnel as well
		distribute = true;
	},

	{
		id = "database";

		type = "database";

		uri = "mongodb://mauer:27017";
		database = "lora";
		collection = "lora";
	},

	{
		id = "mqtt";

		type = "mqtt";

		host = "192.168.64.1";
		# port = 1883
		topic-in = "gw-in";
		topic-out = "gw-out";
	},

	{
		id = "webserver/websockets";

		type = "http-ws";

		repetition-rate-limiting = {
			max-per-interval  = 240;
			interval-duration = 60;
			max-n-elements    = 1000;
		}

		http-port = 80;

		websockets-port = 9000;
# optional; used when behind a proxy; without ws or wss!
		websockets-url = "://keetweej.vanheusden.com/lora-aprs-ws";

		websockets-ssl-enabled = false;
		websockets-ssl-certificate = "";
		websockets-ssl-private-key = "";
		websockets-ssl-ca = "";
	}
)

connections = (
	{
# send messages coming in from 'ax0'
		from   = "ax0";
# too 'axudp-tunnels'
		to     = "axudp-tunnels database mqtt webserver/websockets";
	},

	{
		from   = "ax0";
		to     = "lora-sx1278";
		filter = "valid-nl-callsign webserver/websockets";
	},

	{
		from = "axudp-tunnels";
		to   = "ax0 database mqtt webserver/websockets";
	},

	{
		from = "lora-sx1278";
		to   = "ax0 axudp-tunnels database mqtt webserver/websockets";
	},

	{
		from = "mqtt";
		to   = "lora-sx1278 ax0 axudp-tunnels database webserver/websockets";
	},

	{
		from = "beacon-ax25";
		to   = "ax0 lora-sx1278 axudp-tunnels mqtt";
	},

	{
		from = "beacon-aprs";
		to   = "ax0 lora-sx1278 axudp-tunnels mqtt";
	}
)
